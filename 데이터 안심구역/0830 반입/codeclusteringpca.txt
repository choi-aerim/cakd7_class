import pandas as pd

df = pd.read_csv('cleanmovedf201911.csv', index_col = 0)
df





# merge
yearmonth = ['201911','202005','202009','202101','202106','202110','202201','202204']

#빈데이터프레임
df_empty = pd.DataFrame(columns = ['시군구명','법정동코드','법정동명','성별','연령대','생활인구수'])

for i in yearmonth:
    df = pd.read_csv(f'cleanmovedf{i}.csv', index_col = 0)
    df['기준년월'] = i
    
    df_empty = pd.concat([df_empty,df])

df_empty   




#불필요한 컬럼 삭제
##groupby 후 연령, 성별 구분 없이 sum
##성별, 연령대 컬럼 삭제
df2 = df_empty.groupby(['기준년월','시군구명','법정동코드','법정동명']).sum().drop(columns = ['성별','연령대'])
df2 = df2.reset_index()
df2



# 기준년월 행열 바꾸기
df2_pivot = df2.pivot_table(index = ['시군구명','법정동코드','법정동명'], columns = '기준년월', values = '생활인구수')
df2_pivot


#증감율계산
df2_rate = df2_pivot.pct_change(axis = 'columns')
df2_rate = df2_rate.drop(columns = '201911')
df2_rate


#plot화를 위한 기준년월 행열바꾸기
df2_rate_melt = pd.melt(df2_rate.reset_index(), id_vars = ['시군구명','법정동코드','법정동명'], value_name = '생활인구 증감율')
df2_rate_melt = df2_rate_melt.groupby(['시군구명','법정동코드','법정동명','기준년월','생활인구 증감율']).sum().reset_index()
df2_rate_melt



#구별 디렉토리 생성

import os

def createfolder(direc):
    if not os.path.exists(direc):
        os.makedirs(direc)

gu = df2_rate_melt.시군구명.unique()

for i in gu:        
    createfolder(f'유동인구_시각화/{i}')



#시각화-> 저장
import matplotlib.pyplot as plt
from matplotlib import font_manager, rc
import warnings
warnings.filterwarnings('ignore')

# import matplotlib as mpl
# import matplotlib.font_manager as fm
from matplotlib import rc

# mpl.matplotlib_fname()
# font_list = fm.findSystemFonts(fontpaths = None, fontext = 'ttf')
rc('font', family='Malgun Gothic')
plt.rcParams['axes.unicode_minus']=False     # 마이너스 부호 깨짐 방지


for gu in df2_rate_melt.시군구명.unique():
    for dong in df2_rate_melt[df2_rate_melt['시군구명'] == gu].법정동명.unique():
        df3 = df2_rate_melt[(df2_rate_melt['시군구명'] == gu) & (df2_rate_melt['법정동명'] == dong)]       
        df3_plot = df3.drop(columns = ['시군구명','법정동코드','법정동명']).set_index('기준년월')
        
        # 시각화
        fig = plt.figure(figsize = (12,5))
        ax = fig.add_subplot(1,1,1)
        ax.plot(df3_plot, marker = 'o', color = 'purple')
        ax.set_ylim(-0.4,0.8)
        ax.set_title(f'{gu} {dong}')
        
        plt.savefig(f'유동인구_시각화/{gu}/{gu}_{dong}.png')




##사용데이터: 증감율
df2_rate
df2_rate.corr()


# 7차원 군집화 
## 최적의 군집화 개수 찾기

from sklearn.cluster import KMeans
inertias = []
for k in range(1,10):
    model = KMeans(n_clusters=k) 
    model.fit(data2)
    inertias.append(model.inertia_)
    
# Plot ks vs inertias
plt.figure(figsize = (10,6))
plt.plot(range(1,10), inertias, '-o', color = 'brown')
plt.xlabel('number of clusters, k')
plt.ylabel('inertia')
plt.xticks(range(1,10))
plt.savefig('유동인구_군집화_시각화/최적군집개수.png')
plt.show()


## 군집화
import numpy as np
import warnings  
from collections import Counter
from matplotlib import rc
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler

rc('font', family='Malgun Gothic')
plt.rcParams['axes.unicode_minus']=False     # 마이너스 부호 깨짐 방지


# 클러스터링 생성
estimator = KMeans(n_clusters = 4)
cluster_ids = estimator.fit_predict(df2_rate)
cluster_ids



#주성분분석:: 차원축소
from sklearn.decomposition import PCA
import seaborn as sns

# 2차원으로 축소
pca = PCA(n_components=2) # n_components = 주성분의 갯수를 결정
pca.fit(df2_rate) # 각도를 찾음

# 축소된 차원으로 데이터를 변환
data2 = pd.DataFrame(data = pca.transform(df2_rate), columns=['pca1', 'pca2'])
data2['법정동명'] = df2_rate.reset_index()['법정동명']
data2 = data2.set_index('법정동명')
display(data2)
pca.explained_variance_ratio_


#시각화
# 플롯
plt.figure(figsize=(18,18))
plt.scatter(data2['pca1'], data2['pca2'], c=cluster_ids)
plt.xlabel("pca1")
plt.ylabel("pca2")


# 범례 달기
# for dong_p, p1, p2 in data2.itertuples():
#     plt.annotate(dong_p, (p1, p2))
plt.axis('off')
plt.savefig('유동인구_군집화7차원_cluster4개_글씨없음.png')    
plt.show()


#
data2['군집명'] = cluster_ids
data2.loc[['이태원동']]
# data2[data2['군집명'] == 3]